#col_names <- colnames(df)
jsondf <- csv_to_json(df)
write(jsondf, "test.json")
View(df)
# Parse a CSV file by separating it into headers and additional data.
# Args
# filename: A path to a CSV file.
# Returns
# An R structure containing the headers from the csv file and the data.
df <- read.csv(filename, header = T)
parse_csv <- function(filename) {
# Parse a CSV file by separating it into headers and additional data.
# Args
# filename: A path to a CSV file.
# Returns
# An R structure containing the headers from the csv file and the data.
df <- read.csv(filename, header = T)
return(df)
}
csv_to_json <- function(df){
jsondf <- toJSON(df,pretty = TRUE)
cat(jsondf)
return(jsondf)
}
df <- parse_csv("sample.csv")
#col_names <- colnames(df)
jsondf <- csv_to_json(df)
write(jsondf, "test.json")
csv_to_XML <- function(df){
xmldf <- csv_to_XML(df)
return(xmldf)
}
xmldf <- csv_to_XML(df)
csv_to_XML <- function(df){
xmldf <- toXML(df)
return(xmldf)
}
xmldf <- csv_to_XML(df)
data<- structure(list(page = c("Page One", "Page Two"), base64 = c("Very Long String thats a base64 character", "Very Long String thats a base64 character")), .Names = c("page", "base64"), row.names = 1:2, class = "data.frame")
names(data) <- c("title", "page")
library(XML)
xml <- xmlTree()
# names(xml)
xml$addTag("report", close=FALSE, attrs=c(type="enhanced"))
xml$addTag("pages", close=FALSE)
for (i in 1:nrow(data)) {
xml$addTag("page", close=FALSE)
for (j in names(data)) {
xml$addTag(j, data[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
cat(saveXML(xml))
csv_to_XML <- function(df){
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, data[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
cat(saveXML(xml))
}
xmldf <- csv_to_XML(df)
csv_to_XML <- function(df){
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
cat(saveXML(xml))
}
xmldf <- csv_to_XML(df)
xmldf <- csv_to_XML(df)
saveXML(xmldf, file="OutputFile.xml")
csv_to_XML <- function(df){
##source: https://stackoverflow.com/questions/35234863/how-convert-a-data-frame-into-a-xml-file-with-r
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
cat(saveXML(xml))
}
xmldf <- csv_to_XML(df)
csv_to_XML <- function(df){
##source: https://stackoverflow.com/questions/35234863/how-convert-a-data-frame-into-a-xml-file-with-r
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
#cat(saveXML(xml))
return(xml)
}
xmldf <- csv_to_XML(df)
saveXML(xmldf, file="OutputFile.xml")
xmldf
cat(xml)
csv_to_XML <- function(df){
##source: https://stackoverflow.com/questions/35234863/how-convert-a-data-frame-into-a-xml-file-with-r
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
cat(xml)
return(xml)
}
xmldf <- csv_to_XML(df)
saveXML(xmldf, file="OutputFile.xml")
xmldf
csv_to_XML <- function(df){
##source: https://stackoverflow.com/questions/35234863/how-convert-a-data-frame-into-a-xml-file-with-r
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
return(cat(saveXML(xml)))
}
csv_to_XML(df)
csv_to_XML <- function(df){
##source: https://stackoverflow.com/questions/35234863/how-convert-a-data-frame-into-a-xml-file-with-r
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
return(cat(saveXML(xml)))
}
df <- parse_csv("sample.csv")
jsondf <- csv_to_json(df)
write(jsondf, "test.json")
csv_to_XML(df)
saveXML(xmldf, file="OutputFile.xml")
csv_to_XML <- function(df){
##source: https://stackoverflow.com/questions/35234863/how-convert-a-data-frame-into-a-xml-file-with-r
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
return(cat(saveXML(xml)))
}
df <- parse_csv("sample.csv")
jsondf <- csv_to_json(df)
write(jsondf, "test.json")
csv_to_XML(df)
saveXML(xmldf, file="OutputFile.xml")
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
getwd()
setwd("c:/USF MSHI/HS 611/hw/lab1/lab-json-xml-r-slee8835")
require(jsonlite)
require(XML)
parse_csv <- function(filename) {
# Parse a CSV file by separating it into headers and additional data.
# Args
# filename: A path to a CSV file.
# Returns
# An R structure containing the headers from the csv file and the data.
df <- read.csv(filename, header = T)
return(df)
}
csv_to_json <- function(df){
jsondf <- toJSON(df,pretty = TRUE)
cat(jsondf)
return(jsondf)
}
csv_to_XML <- function(df){
##source: https://stackoverflow.com/questions/35234863/how-convert-a-data-frame-into-a-xml-file-with-r
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
return(cat(saveXML(xml)))
}
df <- parse_csv("sample.csv")
jsondf <- csv_to_json(df)
write(jsondf, "test.json")
csv_to_XML(df)
saveXML(xmldf, file="OutputFile.xml")
stdout(jsondf)
stdout()
jsondf <- csv_to_json(df)
stdout()
setwd("c:/USF MSHI/HS 611/hw/lab1/lab-json-xml-r-slee8835")
require(jsonlite)
require(XML)
parse_csv <- function(filename) {
# Parse a CSV file by separating it into headers and additional data.
# Args
# filename: A path to a CSV file.
# Returns
# An R structure containing the headers from the csv file and the data.
df <- read.csv(filename, header = T)
return(df)
}
csv_to_json <- function(df){
jsondf <- toJSON(df,pretty = TRUE)
cat(jsondf)
return(jsondf)
}
csv_to_XML <- function(df){
##source: https://stackoverflow.com/questions/35234863/how-convert-a-data-frame-into-a-xml-file-with-r
xml <- xmlTree()
# names(xml)
xml$addTag("records", close=FALSE)
for (i in 1:nrow(df)) {
xml$addTag("patient", close=FALSE)
for (j in names(df)) {
xml$addTag(j, df[i, j])
}
xml$closeTag()
}
xml$closeTag()
xml$closeTag()
return(cat(saveXML(xml)))
}
df <- parse_csv("sample.csv")
jsondf <- csv_to_json(df)
write(jsondf, "test.json")
xmldf <- csv_to_XML(df)
saveXML(xmldf, file="OutputFile.xml")
# Create a vector containing all the positive odd numbers smaller than 100.
for(i in 0: 100){
if(i %% 2 == 0){
print(i)
}
}
for(i in 0: 100){
if(i %% 2 == 0){
print(i)
odd_vec.append(i)
}
}
# Create a vector containing all the positive odd numbers smaller than 100.
odd_vec <- 0
for(i in 0: 100){
if(i %% 2 == 0){
print(i)
odd_vec.append(i)
}
}
for(i in 0: 100){
if(i %% 2 == 0){
print(i)
append(odd_vec,i)
}
}
for(i in 0: 100){
if(i %% 2 == 0){
#print(i)
append(odd_vec,i)
}
}
odd_vec
i
append(odd_vec,i)
city$temp
temp <- c(35, 88, 42, 84, 30)
# Now create a vector with the city names and call the object city.
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
# Use the names function and the objects defined in the previous exercises to associate
#the temperature data with its corresponding city.
names(city) <- temp
# Use the [ and : operators to access the temperature of the first three cities on the
#list.
city[1:3]
# Use the [ operator to access the temperature of Paris and San Juan.
city[3]
city[5]
city$temp
city_temp <- data.frame(city, temp)
#1. Use the function c to create a vector with the average high temperatures in January for
#Beijing, Lagos, Paris, Rio de Janeiro, San Juan, and Toronto, which are 35, 88, 42, 84, 81,
#and 30 degrees Fahrenheit. Call the object temp.
temp <- c(35, 88, 42, 84, 81, 30)
# Now create a vector with the city names and call the object city.
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
city_temp <- data.frame(city, temp)
city_temp$temp[1:3]
city$temp[3,5]
city$temp[3]
city$temp[5]
city_temp$temp[3]
city_temp$temp[5]
city_temp[c(3,5), ]
# Create a vector containing all the positive odd numbers smaller than 100.
seq(1, 100, 2)
# Create a vector of numbers that starts at 6, does not pass 55, and adds numbers in increments of 4/7: 6, 6 + 4/7, 6 + 8/7, and so on. How many numbers does the list have? Hint: use seq and length.
seq(6, 55, 4/7)
# What is the class of the following object a <- seq(1, 10, 0.5)?
a <- seq(1, 10, 0.5)
class(a)
#What is the class of the following object a <- seq(1, 10)?
a <- seq(1, 10)
class(a)
# The class of class(a<-1) is numeric, not integer. R defaults to numeric and to force an integer, you need to add the letter L. Confirm that the class of 1L is integer.
class(a <- 1)
# Define the following vector:x <- c("1", "3", "5") and coerce it to get integers.
x <- c("1", "3", "5")
class(x)
as.numeric(x)
#  In the data frame you made in the second problem convert the temperature from Fahrenheit to Celsius. The conversion is
#C=5/9Ã( F â32)
city_temp$temp <- 5/9*(city_temp$temp-32)
v1 <- c(3, 6, 9)
v2 <- c(4, 6, 1)
# write a function to get eucledian distance between 2 vectors
euc_dist <- function(v1, v2){
dist_sum <- 0
for(i in 1:length(v1)){
dist_sum <- v1[i]+v2[i]
}
return(dist_sum)
}
euc_dist(v1, v2)
# write a function to get eucledian distance between 2 vectors
euc_dist <- function(v1, v2){
dist_sum <- 0
for(i in 1:length(v1)){
dist_sum += v1[i]+v2[i]
}
return(dist_sum)
}
# write a function to get eucledian distance between 2 vectors
euc_dist <- function(v1, v2){
dist_sum <- 0
for(i in 1:length(v1)){
dist_sum <- dist_sum+v1[i]+v2[i]
}
return(dist_sum)
}
v1 <- c(3, 6, 9)
v2 <- c(4, 6, 1)
euc_dist(v1, v2)
dist_sum <- dist_sum+(v1[i]-v2[i])^2
# write a function to get eucledian distance between 2 vectors
euc_dist <- function(v1, v2){
dist_sum <- 0
for(i in 1:length(v1)){
dist_sum <- dist_sum+(v1[i]-v2[i])^2
}
return(dist_sum)
}
v1 <- c(3, 6, 9)
v2 <- c(4, 6, 1)
euc_dist(v1, v2)
v1 <- c(4, 5, 6)
v2 <- c(7, 8, 9)
euc_dist(v1, v2)
10%%2
10%2
print(x, "it's an odd number")
tell_odd <- function(num){
if(num %%2 != 0){
print(x, "it's an odd number")
}
}
# write a function that tells you when there's an odd number
tell_odd <- function(num){
if(num %%2 != 0){
print(x, "it's an odd number")
}
else{
print(x, "it's an even number")
}
}
tell_odd(num)
num <- 15
tell_odd(num)
# write a function that tells you when there's an odd number
tell_odd <- function(num){
if(num %%2 != 0){
print("it's an odd number")
}
else{
print("it's an even number")
}
}
num <- 15
tell_odd(num)
x <- c(6, 7, 8, 9)
x <- c(6, 7, 8, 9)
for(e in x){
print(e)
}
a <-10
i <- 0
a <-10
i <- 0
while(i > 1){
print(paste("loop", i))
i = i + 1
}
library(rio)
# names(xml)
xml$fTag("records", close=FALSE)
library(dplyr)
getwd()
setwd("c:/USF MSHI/HS 611/lecture/lab")
Kazo <- read.csv(Kazo_0.csv)
Kazo <- read.csv(Kazo_0.csv)
Kazo <- read.csv(Kazo_0.csv, header = T)
Kazo <- read.csv(Kazo_0.csv, stringsAsFactors = F)
setwd("c:/USF MSHI/HS 611/lecture/lab")
Kazo <- read.csv(Kazo_0.csv, stringsAsFactors = F)
Kazo <- read.csv("Kazo_0.csv", stringsAsFactors = F)
class(Kazo)
str(Kazo)
summary(Kazo)
glimpse(Kazo)
view(Kazo)
nrow(Kazo)
colnames(Kazo)
age <- Kazo$age
typeof(age)
is.vector(age)
mean(age)
Kazo$HIV
sum(Kazo$HIV[Kazo$HIV == 1])
Kazo$male
sum(Kazo$male[Kazo$male == 1])
#female count
sum(Kazo%male[Kazo$male == 0])
#female count
sum(Kazo$male[Kazo$male == 0])
#female count
sum(Kazo$male[Kazo$male == 0])
#male count
sum(Kazo$male[Kazo$male == 1])
sum(Kazo$male[Kazo$male == 1])
sum(Kazo$male[Kazo$male == 0])
sum(Kazo$male[Kazo$male != 1])
Kazo$male
sum(Kazo$male == 1)
sum(Kazo$male == 0)
sum(Kazo$HIV == 1)
